---
description: 
globs: *.tsx,*.go,*.ts
alwaysApply: false
---
## Test-Driven Development (TDD)
**Final Verification:**
Always use: `go test -v ./backend/api/handler/... | grep FAIL`

**Debugging & Handling Verbose Output:**
**Avoid** `go test -v ./...` directly in the terminal due to excessive output.
**Recommended Alternatives:**
*   **Specific Tests:** `go test -v ./... -run ^TestSpecificFunction$` (Fastest for pinpointing).

## Project Startup and Logging Rules

**Service Startup:**
- Use `bash ./run.sh` to start the one-mcp service
- This script automatically loads .env, ensures PATH, kills port 3000 processes, and starts the Go backend in background
- Logs are output to `backend.log`

**Log Monitoring:**
- Use `tail -f backend.log` to monitor real-time logs
- Use `tail -n 50 backend.log` to view recent log entries
- Use `grep "ERROR\|WARN\|Failed" backend.log` to filter error messages
**Service Management:**
- Use `pkill -f one-mcp` to stop the service
- Check service status with `ps aux | grep one-mcp | grep -v grep`
- API status endpoint: `curl "http://localhost:3003/api/status"`

